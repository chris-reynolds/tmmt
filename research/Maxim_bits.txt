Maxim Structure

Transformation parser
Model parser
Template parser
Template execution
Output file management
Console Container
GUI Container


Feature: 
Some terse yet descriptive text of what is desired In order to realize a named business value As an explicit system actor I want to gain some beneficial outcome which furthers the goal Additional text... 
Scenario: Some determinable business situation 
Given some precondition 
And some other precondition 
When some action by the actor 
And some other action 
And yet another action 
Then some testable outcome is achieved 
And something else we can check happens too 

Scenario: A different situation ...

feature ::= white comment tags header background? feature_elements comment? 
header ::= (!(scenario_outline | scenario | background) .)* 
feature_elements ::= (scenario | scenario_outline)* 
scenario ::= comment tags scenario_keyword space* lines_to_keyword white steps 
scenario_outline ::= comment tags scenario_outline_keyword space* lines_to_keyword white steps examples_sections white 
background ::= comment background_keyword space* lines_to_keyword? (eol+ | eof) steps 
tags ::= white (tag (space|eol)+)* 
tag ::= '@' ([^@\r\n\t ])+ 
comment ::= (comment_line white)* 
comment_line ::= space* '#' line_to_eol 
steps ::= step* 
step ::= comment step_keyword keyword_space line_to_eol (eol+ | eof) multiline_arg? white 
examples_sections ::= examples* 
examples ::= comment space* examples_keyword space* lines_to_keyword? eol table white 
multiline_arg ::= table | py_string 
py_string ::= open_py_string (!close_py_string .)* close_py_string 
open_py_string :: = space* '"""' space* eol 
close_py_string ::= eol space* '"""' white 
cell ::= [^\r\n|]+ '|' 
row ::= space* '|' cell+ eol 
table ::= row+ 
step_keyword ::= 'Given' | 'When' | 'Then' | 'And' | 'But' 
examples_keyword ::= 'Examples:' 
scenario_outline_keyword ::= 'Scenario Outline:' 
scenario_keyword ::= 'Scenario:' 
background_keyword ::= 'Background:' 
lines_to_keyword ::= (!(eol space* reserved_words_and_symbols) .)* 
reserved_words_and_symbols ::= (step_keyword keyword_space) | scenario_keyword | scenario_outline_keyword | table | tag | comment_line 
line_to_eol ::= (!eol .)* 
space ::= ' ' | '\t' 
eol ::= '\r'? '\n' 
white ::= (space | eol)* 
keyword_space ::= ' '
 Scenario:
   Given 
      User sees login form
   when
     the user submits email and password
   and
     ThereExists a user with matching email and password and "Locked out until" is past
   then
     Create Session
   and
     set user "Bad Login Count to 0, "Last Login or Attempt" to Now
     show "user home"  
 
  Scenario:
   Given 
      User sees login form
   when
     the user submits email and password
   and
     There does not Exist a user with matching email and password
   and
     There does not Exist a user with matching email
   then
     show "login form"  

 
  Scenario:
   Given 
      User sees login form
   when
     the user submits email and password
   and
     There does not Exist a user with matching email and password
   and
     ThereExists a user with matching email
   then
     Record Bad Login
     show "Login form" with email


Entities
Attributes
Relation
States
Transitions
Enums
Types

Trivial Requirement Statements
r1. No actions except login can be done without an active session 
r2. A correct email and password is required for an active session.
r3. 3 unsuccessful logins will lock a user account for 15 minutes.
r4. Sessions without traffic will be logged out after 60 minutes.
r5. The user is informed when their account is locked.

Types:
   String has default size of 30
   Datetime
   Integer
   Descriptor is a string of default size 60
Entity:
   "User Account"
	Members:
	  Email unique required
	  Password hidden encrypted required
	  Name Descriptor
	  "Last Login or Attempt" Datetime
	  "Locked out until" Datetime 
	  "Bad Login Count" Integer
	 Scenario Support:
	   "Record Good Login"
	     if "Last Login" < now - 15 minutes then
	       set "Bad Login Count" to 1
	     else
	       Increate "Bad Login Count" by 1
	     if "Bad Login Count" > 3
	       set "Locked Out until" to now+15 
Entity:
  Session 
  Members:
    User refers to "User Account"  
    "Last Traffic" Datetime default now
  Life-cycle:
    States:
      Inactive
      Active
    Action:
      Login ( Created Active with user,Inactive to Active)
      Logout (Active to Inactive)
      Timeout (Active to Inactive triggered by (Now-"Last Traffic">60))
      
     
Signals:
  TryLogin with email and password
    if ThereExists a user with matching email and password then
     if "Locked out until" is past then
       Create Session with user
       set user "Bad Login Count to 0, "Last Login or Attempt" to Now
       show "user home"
     else  
       display "account tmporarility locked"
       show "Login Form" with email
   else if There Exists a user with matching email then
     Record Bad Login
     show "Login form" with email
   else
     show "Login Form"
            
User Interface:
  Partial:
    LoggedoutHeader layout horizontal
    Image signal "Login Form"
  Partial:
    LoggedinHeader layout horizontal
    Image signal "User Home"
    Session.User right
    Image signal "User Settings" right
    Image signal "Logout" right
  Form:
    Create Form with optional entityName layout vertical
    Header: LoggedInHeader
  Form:
    Login Form is a Create Form
    Enter email
    Enter password as password # asterisks shown
    Submit button  signals TryLogin with Email and Password
  

Transforms
Reformat:
  Camelcaser is  "Punctuation to space" then lowercase then upper first character then remove spaces
  Underscorer is 
  Pluraliser is
  
Decorator:
  Member.columnName is Member.name using underscorer plus if member is referer then '_id' 
  
Transform:
  Table is stored Entity but not subtype 
  Column is member but how do we say it belongs to the superclass and only if it is stored.
  Suggestions would be OCL and jQuery

    